package gui.elements;

import javax.swing.JPanel;

import javax.swing.*;

import java.awt.event.*;
import java.awt.*;
import java.text.DecimalFormat;
import java.util.concurrent.*;

public class ChronometerDashBord extends JPanel{

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	

	@SuppressWarnings("serial")

	    // GUI Components
	    private JLabel timeLabel;
	    private JPanel panel,buttonPanel;
	    private JButton startButton ,resetButton , stopButton;

	    // Properties of Program.
	    private byte centiseconds = 0;
	    private byte seconds = 0;
	    private short minutes = 1;

	    private Runnable timeTask;
	    private Runnable incrementTimeTask;
	    private Runnable setTimeTask;
	    private DecimalFormat timeFormatter;
	    private boolean timerIsRunning = true;

	    private ExecutorService executor = Executors.newCachedThreadPool();

	    public ChronometerDashBord(){
	        panel = new JPanel();
	        panel.setLayout(new BorderLayout());
	        timeLabel = new JLabel();
	        this.setBackground(Color.DARK_GRAY);
	        timeLabel.setFont(new Font("Consolas", Font.PLAIN, 13));
	        timeLabel.setHorizontalAlignment(JLabel.CENTER);
	        //timeLabel.setLayout(null);
	       // timeLabel.setBounds(300,30,120,23);
	        panel.add(timeLabel , BorderLayout.NORTH);

	        buttonPanel = new JPanel();
	        buttonPanel.setLayout(new FlowLayout(FlowLayout.CENTER));

	        startButton = new JButton("Start");
	       
	        startButton.addActionListener(new ActionListener(){
	            public void actionPerformed(ActionEvent e)
	            {
	                if (!timerIsRunning)
	                    timerIsRunning = true;

	                executor.execute(timeTask);
	            }
	        });
	        buttonPanel.add(startButton);

	        resetButton = new JButton("Reset");
	        resetButton.addActionListener(new ActionListener(){
	            public void actionPerformed(ActionEvent e){
	                timerIsRunning = false;

	                centiseconds = 0;
	                seconds = 0;
	                minutes = 1;

	                timeLabel.setText(timeFormatter.format(minutes) + ":" 
	                        + timeFormatter.format(seconds) + "." 
	                        + timeFormatter.format(centiseconds));
	            }
	        });

	        buttonPanel.add(resetButton);

	        stopButton = new JButton("Stop");
	        stopButton.addActionListener(new ActionListener(){
	            public void actionPerformed(ActionEvent e)
	            {
	                timerIsRunning = false;
	            }
	        });

	        buttonPanel.add(stopButton);


	        panel.add(buttonPanel, BorderLayout.CENTER);


	        timeFormatter = new DecimalFormat("00");

	        timeTask = new Runnable(){
	            public void run()
	            {
	                while(timerIsRunning)
	                {
	                    executor.execute(incrementTimeTask);

	                    try
	                    {
	                        Thread.sleep(1);
	                    }
	                    catch (InterruptedException ex)
	                    {
	                        ex.printStackTrace();
	                    }
	                 }
	            }
	        };

	        incrementTimeTask = new Runnable(){
	            public void run()
	            {
	                if (centiseconds > 0)
	                    centiseconds--;
	                else
	                {
	                    if (seconds == 0 && minutes == 0)
	                        timerIsRunning = false;
	                    else if (seconds > 0)
	                    {
	                        seconds--;
	                        centiseconds = 99;
	                    }
	                    else if (minutes > 0)
	                    {
	                        minutes--;
	                        seconds = 59;
	                        centiseconds = 99;
	                    }
	                }
	                if(minutes==00 && seconds<10) {
	                 timeLabel.setForeground(Color.red);
	                }
	                if(minutes==0 && seconds==0 && centiseconds==0) {
	                 JLabel text = new JLabel("THE END OF THE ROUND");
	                 text.setForeground(Color.RED);
	                  panel.add(text, BorderLayout.WEST);
	                }
	                executor.execute(setTimeTask);
	            }
	            
	        };    

	        setTimeTask = new Runnable(){
	            public void run()
	            {
	                timeLabel.setText(timeFormatter.format(minutes) + ":" 
	                        + timeFormatter.format(seconds) + "." 
	                        + timeFormatter.format(centiseconds));
	            }
	        };

	     

	        add(panel);
	        //setSize(500,600);
	       // pack();
	        setVisible(true);
	    }
}
